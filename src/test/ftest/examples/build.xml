<?xml version="1.0" encoding="ISO-8859-1"?>
<!--
JBoss, Home of Professional Open Source
Copyright 2008, Red Hat Middleware LLC, and individual contributors
by the @authors tag. See the copyright.txt in the distribution for a
full listing of individual contributors.

This is free software; you can redistribute it and/or modify it
under the terms of the GNU Lesser General Public License as
published by the Free Software Foundation; either version 2.1 of
the License, or (at your option) any later version.

This software is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public
License along with this software; if not, write to the Free
Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
02110-1301 USA, or see the FSF site: http://www.fsf.org.
-->
<project name="ftest.example.common.build" basedir="." default="build" xmlns:server="http://jboss.org/ns/test/ant/server">

	<!-- Location of Seam -->
	<dirname property="seam.dir" file="${ant.file.ftest.example.common.build}/../../../../" />

	<!-- default property setup -->
	<property file="${seam.dir}/src/test/ftest/ftest.properties" />

	<property name="ftest.dir" value="${seam.dir}/src/test/ftest" />
	<property name="src.dir" value="src" />
	<property name="common.src.dir" value="${ftest.dir}/src/main" />
	<property name="local.build.dir" value="build" />
	<property name="classes.dir" value="${local.build.dir}/classes" />
	<property name="test.output.dir" value="${seam.dir}/test-output" />
	<property name="ftest.lib.dir" value="${seam.dir}/lib/ftest" />
	<property name="log.dir" value="log" />
	<property name="test.report.dir" value="test-report" />

	<!-- default deployment targets -->
	<property name="jboss4.deploy.target" value="deploy" />
	<property name="jboss5.deploy.target" value="${jboss4.deploy.target}" />
	<property name="jboss4.undeploy.target" value="undeploy" />
	<property name="jboss5.farm.target" value="farm" />
	<property name="jboss5.unfarm.target" value="unfarm" />
	<property name="jboss5.undeploy.target" value="${jboss4.undeploy.target}" />
	<property name="jboss-embedded.deploy.target" value="tomcat.deploy" />
	<property name="jboss-embedded.undeploy.target" value="tomcat.undeploy" />
	<property name="tomcat6.deploy.target" value="tomcat6.deploy" />
	<property name="tomcat6.undeploy.target" value="tomcat6.undeploy" />
	<!-- default context paths -->
	<property name="jboss4.context.path" value="/seam-${example.name}" />
	<property name="jboss5.context.path" value="${jboss4.context.path}" />
	<property name="jboss-embedded.context.path" value="/jboss-seam-${example.name}" />
	<property name="tomcat6.context.path" value="${jboss-embedded.context.path}" />
	
	<property name="jboss4.build.file" value="build.xml" />
	<property name="jboss5.build.file" value="${jboss4.build.file}" />
	<property name="jboss6.build.file" value="${jboss5.build.file}" />
	<property name="tomcat6.build.file" value="${jboss4.build.file}" />
	<property name="jboss-embedded.build.file" value="${jboss4.build.file}" />
	
	<property name="jboss4.example.testsuite" value="jboss4" />
	<property name="jboss5.example.testsuite" value="jboss5" />
	<property name="jboss6.example.testsuite" value="${jboss5.example.testsuite}" />
	<property name="tomcat6.example.testsuite" value="tomcat6" />
	<property name="jboss-embedded.example.testsuite" value="jboss-embedded" />
	
	<!-- JBoss AS 6 -->
	<property name="jboss6.deploy.waittime" value="${jboss5.deploy.waittime}" />
	<property name="jboss6.home" value="${jboss5.home}" />
	<property name="jboss6.profile" value="${jboss5.profile}" />
	<property name="jboss6.jvm.arguments" value="${jboss5.jvm.arguments}" />
	<property name="jboss6.deploy.target" value="${jboss5.deploy.target}" />
	<property name="jboss6.farm.target" value="${jboss5.farm.target}" />
	<property name="jboss6.unfarm.target" value="${jboss5.unfarm.target}" />
	<property name="jboss6.undeploy.target" value="${jboss5.undeploy.target}" />
	<property name="jboss6.context.path" value="${jboss5.context.path}" />
	
	<property name="functional.listener" value="org.jboss.seam.example.common.test.selenium.SeleniumFunctionalTestListener"/>
	<property name="root.lib.dir" value="${seam.dir}/lib" />
	<property name="example.homepage" value="" />

	<!-- Build resources -->
	<import file="${seam.dir}/build/common.build.xml" />

	<!-- common path setup -->

	<path id="classpath.build">
		<fileset dir="${root.lib.dir}">
			<include name="testng-jdk15.jar"/>
		</fileset>
		<fileset dir="${ftest.lib.dir}" includes="**/*.jar" />
	</path>

	<path id="classpath.test">
		<path refid="classpath.build" />
		<path location="${classes.dir}" />
	</path>

	<!-- common target definitions -->

	<target name="clean" description="Delete all generated files">
		<delete dir="${local.build.dir}" />
		<delete dir="${test.output.dir}" />
		<delete dir="${report.dir}" />
		<delete dir="${log.dir}" />
	</target>

	<!-- override this target in example to get specific behaviour -->
	<target name="build.extras" description="Build example specific files before build">
	</target>

	<target name="build" depends="build.common, build.extras" description="Compiles the Test">
		<javac srcdir="${src.dir}" destdir="${classes.dir}" classpathref="classpath.build" debug="true" />
		<copy todir="${classes.dir}">
			<fileset dir="${src.dir}">
				<exclude name="**/*.java" />
			</fileset>
		</copy>
	</target>

	<!-- TODO we should compile this once to a common place not build for each example -->
	<!-- TODO if needed we should allow examples to exclude/include src under 
        common dvd does not care about booking for example-->
	<target name="build.common" depends="copy.htmlunit, copy.selenium, copy.webdriver" description="Compiles the common selenium test code">
		<mkdir dir="${classes.dir}" />
		<javac srcdir="${common.src.dir}" destdir="${classes.dir}" classpathref="classpath.build" debug="true" />
		<copy todir="${classes.dir}">
			<fileset dir="${src.dir}">
				<exclude name="**/*.java" />
			</fileset>
		</copy>
	</target>

	<target name="selenium.test" depends="build, container.properties" description="Run Tests">
		<taskdef resource="testngtasks" classpathref="classpath.test" />
		<mkdir dir="${test.output.dir}" />
		
		<condition property="clusterxml" value="cluster">
		      <equals arg1="${cluster}" arg2="true"/>
		</condition>
		<condition property="clusterxml" value="">
			  <not>
			  	<equals arg1="${cluster}" arg2="true"/>
			  </not>				
		</condition>
		
		<!-- execute testng tests -->
		<testng haltonfailure="false" outputdir="${test.output.dir}" classpathref="classpath.test" listener="${functional.listener}">
			<xmlfileset file="${example.testsuite}${clusterxml}.xml" />
			<sysproperty key="selenium.server.port" value="${selenium.server.port}" />
			<sysproperty key="selenium.host" value="${selenium.host}" />
			<sysproperty key="selenium.browser" value="${selenium.browser}" />
			<sysproperty key="selenium.browser.url" value="${selenium.browser.url}" />
			<sysproperty key="selenium.speed" value="${selenium.speed}" />
			<sysproperty key="selenium.timeout" value="${selenium.timeout}" />
			<sysproperty key="example.context.path" value="${context.path}" />
			<sysproperty key="openid.account" value="${openid.account}" />
			<sysproperty key="openid.password" value="${openid.password}" />
			<sysproperty key="seam.dir" value="${seam.dir}" />
			<sysproperty key="jboss.home" value="${container.home}" />
			<sysproperty key="container" value="${container}" />
		</testng>
	</target>

	<target name="webdriver.test" depends="webdriver.test.present, build, container.properties" description="Run Tests (WebDriver)" if="test.webdriver">
		<taskdef resource="testngtasks" classpathref="classpath.test" />
		<mkdir dir="${test.output.dir}" />
	    <echo message="${test.webdriver}" />	
		<!-- execute testng tests -->
		<testng haltonfailure="false" outputdir="${test.output.dir}" classpathref="classpath.test">
			<xmlfileset file="${example.testsuite}-webdriver.xml" />
			<sysproperty key="browser" value="${selenium.browser}" />
			<sysproperty key="server.url" value="${selenium.browser.url}" />
            <sysproperty key="context.path" value="${context.path}" />
		</testng>
	</target>

    <target name="webdriver.test.present">
        <condition property="test.webdriver">
            <not>
                <equals arg1="${webdriver}" arg2="false"/>
            </not>
        </condition>
    </target>

	<target name="simpletest" depends="build, container.properties" description="Run Tests" unless="cluster">
		<!-- TODO all of these jboss commands must be optional with checks -->
		<!-- TODO  go get JBoss and extract -->
		<echo message="executing..."/>
		<!-- TODO start JBoss -->
		<!-- clean example -->
		<ant antfile="${seam.dir}/examples/${example.name}/${example.build.file}" target="clean" inheritall="false" dir="${seam.dir}/examples/${example.name}" />
      <groovy>
         <![CDATA[
            System.clearProperty("TIMEOUT");
         ]]>
      </groovy>

		<!-- deploy the example-->
		<antcall target="deploy.example" />

		<!-- execute testng tests -->
		<antcall target="selenium.test" />
        <antcall target="webdriver.test"/>

		<!-- undeploy the example -->
		<antcall target="undeploy.example" />

		<!-- TODO stop jboss -->

		<!-- TODO remove jboss -->
	</target> 
	
	<target name="clustertest" depends="build, container.properties" description="Run Tests in a cluster environment" if="cluster">
			<echo message="executing..."/>
			<ant antfile="${seam.dir}/examples/${example.name}/${example.build.file}" target="clean" inheritall="false" dir="${seam.dir}/examples/${example.name}" />
			<antcall target="farm.example" />
			<antcall target="selenium.test" />
			<antcall target="unfarm.example" />
	</target>
	
	<target name="test" depends="simpletest, clustertest"/>

	<!-- TODO get this to next level too - how to combine into one report -->
	<target name="testreport" depends="test" description="generate html report">
		<mkdir dir="${test.report.dir}" />
		<junitreport todir="${test.report.dir}">
			<fileset dir="${test.output.dir}">
				<include name="**/*.xml" />
				<exclude name="**/testng-*.xml" />
			</fileset>
			<report format="noframes" todir="${test.report.dir}" />
		</junitreport>
		<echo>Report available at ${report.dir}/junit-noframes.html</echo>
	</target>

	<target name="deploy.example" depends="container.properties">
		<property name="absolute.wait.url" value="${selenium.browser.url}${wait.url}${example.homepage}" />
		<echo>Deploying ${example.name} example to ${container} using ${deploy.target} target (${example.build.file})</echo>
		<ant antfile="${seam.dir}/examples/${example.name}/${example.build.file}" target="${deploy.target}" inheritall="false" dir="${seam.dir}/examples/${example.name}">
			<property name="jboss.home" value="${container.home}" />
			<property name="tomcat.home" value="${container.home}" />
			<propertyset refid="deploy.properties" />
		</ant>
		<!-- wait for the application to be active -->
      <groovy>
         <arg value="${container}" />
         <![CDATA[
         System.setProperty("CONTAINER", args[0]);
         
         def waitTime = properties.get("wait.time");
         def waitUrl = properties.get("absolute.wait.url");
         
         ant.echo("Waiting " + waitTime + " seconds for " + waitUrl);
         ant.waitfor(maxwait:waitTime,maxwaitunit:'second',timeoutproperty:'timeout') {
            ant.http(url:waitUrl,errorsBeginAt:'404');
         }
         
         if (properties.timeout != null) {
            System.setProperty("TIMEOUT", System.getProperty("EXAMPLE"));
         }
         ]]>
      </groovy>
	</target>
	
	<target name="farm.example" depends="container.properties">
      <property name="absolute.wait.url" value="${selenium.browser.url.cluster}${wait.url}" />
      <echo>Deploying ${example.name} example to farm directory of ${container} using ${farm.target} target</echo>
      <ant antfile="${seam.dir}/examples/${example.name}/${example.build.file}" target="${farm.target}" inheritall="false" dir="${seam.dir}/examples/${example.name}">
         <property name="jboss.home" value="${container.home}" />
         <property name="tomcat.home" value="${container.home}" />				
         <property name="session.replication" value="true" />
         <property name="distributable" value="true" />				
         <propertyset refid="deploy.properties" />
      </ant>
      <!-- wait for the application to be active -->
      <groovy>
         <arg value="${container}" />
         <![CDATA[
         System.setProperty("CONTAINER", args[0]);
         
         def waitTime = properties.get("wait.time");
         def waitUrl = properties.get("absolute.wait.url");
         
         ant.echo("Waiting " + waitTime + " seconds for " + waitUrl);
         ant.waitfor(maxwait:waitTime,maxwaitunit:'second',timeoutproperty:'timeout') {
            ant.http(url:waitUrl,errorsBeginAt:'404');
         }
         
         if (properties.timeout != null) {
            System.setProperty("TIMEOUT", System.getProperty("EXAMPLE"));
         }
         ]]>
      </groovy>
   </target>

	<target name="undeploy.example" depends="container.properties">
		<echo>Undeploying example ${example.name} from ${container} using ${undeploy.target} target</echo>
		<ant antfile="${seam.dir}/examples/${example.name}/${example.build.file}" target="${undeploy.target}" inheritall="false" dir="${seam.dir}/examples/${example.name}">
			<property name="jboss.home" value="${container.home}" />
			<property name="tomcat.home" value="${container.home}" />
		</ant>
	</target>
	
	<target name="unfarm.example" depends="container.properties">
			<echo>Undeploying example ${example.name} from farm directory of ${container} using ${unfarm.target} target</echo>
			<ant antfile="${seam.dir}/examples/${example.name}/${example.build.file}" target="${unfarm.target}" inheritall="false" dir="${seam.dir}/examples/${example.name}">
				<property name="jboss.home" value="${container.home}" />
				<property name="tomcat.home" value="${container.home}" />
			</ant>
	</target>

	<!-- <target name="container.properties" depends="set.deploy.properties" unless="container.home">-->
    <target name="container.properties" depends="set.deploy.properties">
		<set.container.properties container="${container}" />
	</target>

	<macrodef name="set.container.properties">
		<attribute name="container" />
		<sequential>
			<fail unless="@{container}.home" message="@{container}.home property has to be set" />
			<property name="container.home" value="${@{container}.home}" />
			<property name="container.profile" value="${@{container}.profile}" />
			<property name="container.jvm.arguments" value="${@{container}.jvm.arguments}" />
			<property name="deploy.target" value="${@{container}.deploy.target}" />
			<property name="farm.target" value="${@{container}.farm.target}" />
			<property name="unfarm.target" value="${@{container}.unfarm.target}" />
			<property name="undeploy.target" value="${@{container}.undeploy.target}" />
			<property name="context.path" value="${@{container}.context.path}" />
			<property name="wait.url" value="${context.path}" />
			<property name="wait.time" value="${@{container}.deploy.waittime}" />
			<property name="example.build.file" value="${@{container}.build.file}" />
			<property name="example.testsuite" value="${@{container}.example.testsuite}" />
			<propertyset id="deploy.properties" refid="@{container}.deploy.properties" />
			<echo>Container properties set</echo>
		</sequential>
	</macrodef>

	<!-- this target sets empty deploy property sets by default -->
	<!-- override this target in example specific build.xml to specify property sets -->
	<target name="set.deploy.properties">
		<propertyset id="jboss4.deploy.properties" />
		<propertyset id="jboss5.deploy.properties" />
		<propertyset id="jboss6.deploy.properties" />
		<propertyset id="tomcat6.deploy.properties" />
		<propertyset id="jboss-embedded.deploy.properties" />
	</target>

	<target name="start.container.jboss" depends="container.properties">
		<echo message="Starting JBoss server" />
		<java classname="org.jboss.Main" fork="true" spawn="true" dir="${container.home}/bin">
			<classpath>
				<pathelement location="${container.home}/bin/run.jar" />
			</classpath>
            <sysproperty key="java.endorsed.dirs" value="${container.home}/lib/endorsed" />
			<jvmarg line="${container.jvm.arguments}" />
			<arg line="-c ${jboss.domain} -b ${jboss.host}" />
		</java>
		<waitfor maxwait="2" maxwaitunit="minute">
			<socket server="localhost" port="8080" />
		</waitfor>
	</target>

	<target name="stop.container.jboss" depends="container.properties" >
		<sequential>
			<echo message="Shutting down JBoss server"/>
			<java classname="org.jboss.Shutdown" fork="false" dir="${container.home}/bin">
				<classpath>
					<pathelement location="${container.home}/bin/shutdown.jar" />
					<!--<pathelement location="${container.home}/client/jbossall-client.jar" />-->
				</classpath>
				<arg value="--shutdown"/>
				<arg value="-u"/>
				<arg value="${jboss.jmx.username}"/>
				<arg value="-p"/>
				<arg value="${jboss.jmx.password}"/>
			</java>
			<waitfor maxwait="300" maxwaitunit="second">
				<not>
					<socket server="localhost" port="1099" />
				</not>
			</waitfor>
			<sleep seconds="3"/>
		</sequential>
	</target>
	
	<!-- Target for obtaining htmlunit  -->
	<target name="copy.htmlunit" if="depends.htmlunit" unless="copy.htmlunit.done">
		<copyInlineDependencies id="allexamples" scope="compile" todir="${ftest.lib.dir}">
			<dependency groupId="net.sourceforge.htmlunit" artifactId="htmlunit" version="2.3"/>
			<dependency groupId="commons-httpclient" artifactId="commons-httpclient" version="3.1"/>
			<dependency groupId="org.w3c" artifactId="sac" version="1.3"/>
			<dependency groupId="commons-io" artifactId="commons-io" version="1.3.1"/>
			<dependency groupId="commons-lang" artifactId="commons-lang" version="2.3"/>
			<dependency groupId="apache-xerces" artifactId="xercesImpl" version="2.9.0"/>
			<dependency groupId="commons-collections" artifactId="commons-collections" version="3.1"/>
			<dependency groupId="commons-lang" artifactId="commons-lang" version="2.3"/>
			<dependency groupId="apache-xalan" artifactId="xalan" version="j_2.7.0"/>
			<dependency groupId="commons-codec" artifactId="commons-codec" version="1.3"/>
			<dependency groupId="commons-logging" artifactId="commons-logging" version="1.1.1"/>
			<dependency groupId="net.sourceforge.cssparser" artifactId="cssparser" version="0.9.5"/>
			<dependency groupId="net.sourceforge.htmlunit" artifactId="htmlunit-core-js" version="2.4"/>
			<dependency groupId="net.sourceforge.nekohtml" artifactId="nekohtml" version="1.9.9"/>
			<dependency groupId="apache-xalan" artifactId="serializer" version="j_2.7.0"/>
			<dependency groupId="xml-apis" artifactId="xml-apis" version="1.3.03"/>
		</copyInlineDependencies>
		<property name="copy.htmlunit.done" value="true" />
	</target>
	
	<target name="copy.selenium" unless="copy.selenium.done">
		<copyInlineDependencies id="selenium.server" scope="compile" todir="${ftest.lib.dir}">
			<dependency groupId="org.seleniumhq.selenium.server" artifactId="selenium-server" version="1.0.3" classifier="standalone">
				<exclusion groupId="org.seleniumhq.selenium.core" artifactId="selenium-core" />
				<exclusion groupId="org.seleniumhq.selenium.server" artifactId="selenium-server-coreless" />
				<exclusion groupId="org.apache.ant" artifactId="ant-trax" />
				<exclusion groupId="org.apache.ant" artifactId="ant-nodeps" />
			</dependency>
			<dependency groupId="org.seleniumhq.selenium.client-drivers" artifactId="selenium-java-client-driver" version="1.0.2">
				<exclusion groupId="org.codehaus.groovy.maven.runtime" artifactId="gmaven-runtime-default" />
			</dependency>
			<dependency groupId="org.subethamail" artifactId="subethasmtp-smtp" version="1.2" >
				<!-- subethamail requires commons-logging 1.1 which requires log4j 1.2.12. But we provide log4j 1.2.14, which is completely ok -->
				<exclusion groupId="log4j" artifactId="log4j" />
			</dependency>
			<dependency groupId="org.subethamail" artifactId="subethasmtp-wiser" version="1.2" />
         <dependency groupId="xmlunit" artifactId="xmlunit" version="1.3" />
		</copyInlineDependencies>
		<property name="copy.selenium.done" value="true" />
	</target>

    <target name="copy.webdriver" unless="copy.webdriver.done">
       	<copyInlineDependencies id="webdriver.driver" scope="compile" todir="${ftest.lib.dir}">
			<dependency groupId="org.seleniumhq.webdriver" artifactId="webdriver-firefox" version="0.9.7376">
			</dependency>
			<dependency groupId="org.seleniumhq.webdriver" artifactId="webdriver-support" version="0.9.7376">
			</dependency>
			<dependency groupId="org.seleniumhq.webdriver" artifactId="webdriver-ie" version="0.9.7376">
			</dependency>
		</copyInlineDependencies>
        <property name="copy.webdriver.done" value="true" />
    </target>

</project>
